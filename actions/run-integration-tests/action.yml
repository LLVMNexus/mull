name: Integration tests
description: Integration tests
inputs:
  LLVM_VERSION:
    description: 'LLVM Version'
    required: true
  clang:
    description: 'clang'
    required: true
  clangxx:
    description: 'clang++'
    required: true
  cmake-prefix:
    description: 'CMAKE_PREFIX_PATH'
    required: true
  mull-version:
    description: 'mull version'
    required: true
runs:
  using: "composite"
  steps:
    - name: Prepare integration tests
      shell: bash
      run: mkdir integration-tests

    - name: Checkout fmt
      uses: actions/checkout@v3
      with:
        repository: https://github.com/fmtlib/fmt.git
        ref: 9e554999ce02cf86fcdfe74fe740c4fe3f5a56d5
        path: integration-tests/fmt

    - name: Create build directory for fmt
      shell: bash
      run: mkdir integration-tests/fmt.build.dir

    - name: Create build directory for fmt
      shell: bash
      run: mkdir integration-tests/fmt.build.dir

    - name: Prepare build system for fmt
      command:
      args:
        argv:
          - cmake
          - -G
          - Ninja
          - -DCMAKE_CXX_FLAGS={{ test_opt_level }} -grecord-command-line -fexperimental-new-pass-manager -fpass-plugin=/usr/local/lib/mull-ir-frontend-{{ llvm_major }} --sysroot={{ SDKROOT }}
          - -DCMAKE_BUILD_TYPE=Debug
          - -DCMAKE_C_COMPILER={{ cmake_c_compiler }}
          - -DCMAKE_CXX_COMPILER={{ cmake_cxx_compiler }}
          - "{{ working_dir }}/integration/fmt"
        chdir: "{{ working_dir }}/integration/fmt.build.dir"
        creates: "{{ working_dir }}/integration/fmt.build.dir/CMakeCache.txt"

    - name: Build fmt
      command: ninja core-test
      args:
        chdir: "{{ working_dir }}/integration/fmt.build.dir"
      environment:
        MULL_CONFIG: "{{ test_mull_config }}"

#    - name: Run fmt
#      command: ./bin/core-test
#      args:
#        chdir: "{{ working_dir }}/integration/fmt.build.dir"
#
#    - name: Run Mull against fmt
#      command: mull-runner-{{ llvm_major }} {{ working_dir }}/integration/fmt.build.dir/bin/core-test
#
#    - name: Clone OpenSSL
#      git:
#        repo: https://github.com/openssl/openssl.git
#        dest: "{{ working_dir }}/integration/openssl"
#        version: a4e01187d3648d9ce99507097400902cf21f9b55
#
#    - name: Prepare build system for OpenSSL (no-shared)
#      command:
#      args:
#        argv:
#          - ./config
#          - -g
#          - -O0
#          - "{{ test_opt_level }}"
#          - -grecord-command-line
#          - -fexperimental-new-pass-manager
#          - -fpass-plugin=/usr/local/lib/mull-ir-frontend-{{ llvm_major }}
#          - --sysroot={{ SDKROOT }}
#        chdir: "{{ working_dir }}/integration/openssl"
#        creates: "{{ working_dir }}/integration/openssl/Makefile"
#      environment:
#        CC: "{{ cmake_c_compiler }}"
#
#    - name: Build OpenSSL (generated)
#      command: make build_generated -j
#      args:
#        chdir: "{{ working_dir }}/integration/openssl"
#      environment:
#        MULL_CONFIG: "{{ test_mull_config }}"
#
#    - name: Build OpenSSL (bio_enc_test)
#      command: make ./test/bio_enc_test
#      args:
#        chdir: "{{ working_dir }}/integration/openssl"
#      environment:
#        MULL_CONFIG: "{{ test_mull_config }}"
#
#    - name: Patch OpenSSL on macOS (bio_enc_test)
#      command: install_name_tool -change /usr/local/lib/libcrypto.3.dylib "{{ working_dir }}/integration/openssl/libcrypto.3.dylib" ./test/bio_enc_test
#      args:
#        chdir: "{{ working_dir }}/integration/openssl"
#      when: platform == 'macos'
#
#    - name: Run OpenSSL (bio_enc_test)
#      command: ./test/bio_enc_test
#      args:
#        chdir: "{{ working_dir }}/integration/openssl"
#      environment:
#        LD_LIBRARY_PATH: "{{ working_dir }}/integration/openssl"
#
#    - name: Run Mull against OpenSSL
#      command: mull-runner-{{ llvm_major }} {{ working_dir }}/integration/openssl/test/bio_enc_test
